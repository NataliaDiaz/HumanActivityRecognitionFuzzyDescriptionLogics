% Logic for desired semantics: Zadeh or Lukasiewicz 
(define-fuzzy-logic zadeh)

% Concepts and Relations 
(define-primitive-concept User *top* )
(define-primitive-concept Object *top* )  %disjunctive?
(define-primitive-concept Spoon Object)
(define-primitive-concept Fork Object)
(define-primitive-concept Knife Object)
(define-primitive-concept Location *top*)
(define-primitive-concept Phone Object)
(define-primitive-concept Activity *top*)
(define-primitive-concept Action *top*)
(define-primitive-concept SubActivity Activity)

% Properties
(functional isInLocation)
(functional isNearTo)
(functional isUsingObject)

(range performsAction Action)
(domain performsAction User)
(range performsActivity Activity)
(domain performsActivity User)
(range performsSubActivity SubActivity)
(domain performsSubActivity User)
(range isUsingObject Object)
(domain isUsingObject User)
(range isNearTo Location)
(domain isNearTo User)
(range isInLocation Location)
(domain isInLocation User)

% Abstract roles (data properties):
(functional hasStartFrame)
(functional hasEndFrame)
(range hasStartFrame *integer* 0 100000)
(range hasEndFrame *integer* 0 100000 )


% SubActivities: reaching, moving, pouring, eating, drinking, opening, placing, closing, scrubbing, null
(define-primitive-concept Reaching SubActivity)
(define-primitive-concept Moving SubActivity)
(define-primitive-concept Pouring SubActivity)
(define-primitive-concept Eating SubActivity)
(define-primitive-concept Drinking SubActivity)
(define-primitive-concept Opening SubActivity)
(define-primitive-concept Placing SubActivity)
(define-primitive-concept Closing SubActivity)
(define-primitive-concept Scrubbing SubActivity)
(define-primitive-concept Null SubActivity)

% IN CRISP CASE ALL INSTANTIATIONS HAVE DEGREE OF TRUTH 1 
(instance Wiktor User 1.0 )
(instance Natalia User 1.0 )
(instance Micke User 1.0 )

(instance reaching Reaching )
(instance moving Moving )
(instance placing Placing )
(instance pouring Pouring )
(instance activity Activity )
(instance eating Eating)

(instance openCupboard OpenCupboard 1.0)
(instance turnCoffeeMachineOn TurnCoffeeMachineOn 1.0)
(instance moveCoffeeJar MoveCoffeeJar 1.0)
(instance openFridge OpenFridge 1.0)

(related Natalia reaching performsSubActivity 0.1 )
(related Natalia moving performsSubActivity 0.2 )
(related Micke eating performsSubActivity 0.4 )

% RULES %%%%%%%%%%% We assume each rule has associated a specific time-window where the activities need to be detected.

% RIGHT WAY OF DEFINING WEIGHTED CONCEPT:
(define-concept reach (g-and User (some performsSubActivity Reaching)))
(define-concept move (g-and User (some performsSubActivity Moving)))
(define-concept eat (g-and User (some performsSubActivity Eating)))
(define-concept drink (g-and User (some performsSubActivity Drinking)))
(define-concept place (g-and User (some performsSubActivity Placing)))
(define-concept pour (g-and User (some performsSubActivity Pouring)))
(define-concept open (g-and User (some performsSubActivity Opening)))
(define-concept close (g-and User (some performsSubActivity Closing)))
(define-concept scrub (g-and User (some performsSubActivity Scrubbing)))
(define-concept null (g-and User (some performsSubActivity Null)))

(define-concept antecedent1 (w-sum (0.25 reach) (0.25 move) (0.25 place) (0.25 pour)))
(define-concept consequent1 (g-and User (some performsActivity MakingCereal)))

(define-concept antecedent2 (w-sum (0.16 reach) (0.16 move ) (0.16 place) (0.16 open)(0.18 eat)(0.18 drink)))
(define-concept consequent2 (g-and User (some performsActivity TakingMedicine)))


(define-concept antecedent3 (w-sum (0.33 reach) (0.33 move ) (0.34 place)))
(define-concept consequent3 (g-and User (some performsActivity StackingObjects)))

(define-concept antecedent4 (w-sum (0.33 reach) (0.33 move ) (0.34 place)))
(define-concept consequent4 (g-and User (some performsActivity UnstackingObjects)))

(define-concept antecedent5 (w-sum (0.2 reach) (0.2 move ) (0.2 place) (0.2 open) (0.2 close))) %optimize?
(define-concept consequent5 (g-and User (some performsActivity MicrowavingFood)))

(define-concept antecedent6 (w-sum (0.5 reach) (0.5 move )))
(define-concept consequent6 (g-and User (some performsActivity PickingObjects)))

(define-concept antecedent7 (w-sum (0.175 reach) (0.175 move ) (0.175 open) (0.175 close) (0.3 scrub)))
(define-concept consequent7 (g-and User (some performsActivity CleaningObjects)))

(define-concept antecedent8 (w-sum (0.2 reach) (0.2 place) (0.3 open ) (0.3 close)))
(define-concept consequent8 (g-and User (some performsActivity TakingFood)))

(define-concept antecedent9 (w-sum (0.33 reach) (0.33 move ) (0.34 place)))
(define-concept consequent9 (g-and User (some performsActivity ArrangingObjects)))

(define-concept antecedent10 (w-sum (0.25 reach) (0.25 move) (0.25 eat) (0.25 drink)))
(define-concept consequent10 (g-and User (some performsActivity HavingAMeal )))


% Implicative Rule (it could be replaced by a Mamdani Rule)
(define-concept Rule1 (l-implies antecedent1 consequent1 ) )
(define-concept Rule2 (l-implies antecedent2 consequent2 ) )
(define-concept Rule3 (l-implies antecedent3 consequent3 ) )
(define-concept Rule4 (l-implies antecedent4 consequent4 ) )
(define-concept Rule5 (l-implies antecedent5 consequent5 ) )
(define-concept Rule6 (l-implies antecedent6 consequent6 ) )
(define-concept Rule7 (l-implies antecedent7 consequent7 ) )
(define-concept Rule8 (l-implies antecedent8 consequent8 ) )
(define-concept Rule9 (l-implies antecedent9 consequent9 ) )
(define-concept Rule10 (l-implies antecedent10 consequent10 ) )


%(instance Wictor Rule1)
%(instance Wictor Rule2)
(instance Natalia Rule1) 
(instance Natalia Rule2) 
(instance Natalia Rule3) 
(instance Natalia Rule4) 
(instance Natalia Rule5) 
(instance Natalia Rule6) 
(instance Natalia Rule7) 
(instance Natalia Rule8) 
(instance Natalia Rule9) 
(instance Natalia Rule10)  % required to give positive in  (min-instance? Natalia (some performsActivity DoStretching)). Otherwise it gives >=0, but it is >= 0.4. 
%It acts as subscribing the user to certain rule (e.g. Rule4 applies to Natalia or Natalia is subscribed to the Rule4).
(instance Micke Rule10)
(instance Micke (some performsSubActivity eating))
(instance eating (= hasStartFrame 8))

% Is the KB satisfiable?
(sat?)

% We do not use min-sat, but the minimal degree to which an instance belongs to certain concept
(min-instance? Natalia (some performsActivity MakingCereal))
(min-instance? Natalia (some performsActivity PickingObjects))
(min-instance? Natalia (some performsActivity HavingAMeal))
(min-instance? Micke (some performsSubActivity eating))
(min-instance? Micke (some performsActivity HavingAMeal))
(min-var? eating)





